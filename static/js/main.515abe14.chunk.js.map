{"version":3,"sources":["ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listItems","items","map","react_default","a","createElement","className","key","text","index_es","onClick","deleteItem","icon","react_flip_move_es","duration","easing","library","add","faTrash","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentItem","handleInput","bind","assertThisInitialized","addItem","e","setState","target","value","Date","now","filteredItems","filter","item","preventDefault","newItem","console","log","newItems","concat","toConsumableArray","id","onSubmit","type","placeholder","onChange","src_ListItems","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iUAyBeA,MApBf,SAAmBC,GAClB,IACMC,EADQD,EAAME,MACIC,IAAI,SAAAD,GAC3B,OAAOE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,IAAKN,EAAMM,KACrCJ,EAAAC,EAAAC,cAAA,SAAIJ,EAAMO,KACVL,EAAAC,EAAAC,cAAA,YACCF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAiBC,QAAU,kBAAMX,EAAMY,WAAWV,EAAMM,MAAMD,UAAU,UAAUM,KAAK,eAK5F,OACCT,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAUC,SAAU,IAAKC,OAAO,eAC/Bf,oBCZHgB,IAAQC,IAAIC,SAkEGC,cA/Db,SAAAA,EAAYpB,GAAO,IAAAqB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMxB,KACD4B,MAAQ,CACX1B,MAAO,GACP2B,YAAY,CACZpB,KAAM,GACND,IAAK,KAGPa,EAAKS,YAAcT,EAAKS,YAAYC,KAAjBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACnBA,EAAKY,QAAUZ,EAAKY,QAAQF,KAAbT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACfA,EAAKT,WAAaS,EAAKT,WAAWmB,KAAhBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAXDA,2EAcPa,GACVV,KAAKW,SAAS,CACZN,YAAY,CACVpB,KAAMyB,EAAEE,OAAOC,MACf7B,IAAI8B,KAAKC,4CAKJ/B,GACT,IAAMgC,EAAgBhB,KAAKI,MAAM1B,MAAMuC,OAAO,SAAAC,GAAI,OAAIA,EAAKlC,MAAQA,IACnEgB,KAAKW,SAAS,CACZjC,MAAOsC,oCAIHN,GACNA,EAAES,iBACF,IAAMC,EAAUpB,KAAKI,MAAMC,YAE3B,GADAgB,QAAQC,IAAIF,GACQ,KAAjBA,EAAQnC,KAAa,CACtB,IAAMsC,EAAQ,GAAAC,OAAA1B,OAAA2B,EAAA,EAAA3B,CAAOE,KAAKI,MAAM1B,OAAlB,CAAyB0C,IACvCpB,KAAKW,SAAS,CACZjC,MAAO6C,EACPlB,YAAa,CACXpB,KAAM,GACND,IAAK,wCAOX,OACEJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,QAAM4C,GAAG,YAAYC,SAAU3B,KAAKS,SAClC7B,EAAAC,EAAAC,cAAA,SAAO8C,KAAK,OAAOC,YAAY,aAAahB,MAAOb,KAAKI,MAAMC,YAAYpB,KAAM6C,SAAU9B,KAAKM,cAE/F1B,EAAAC,EAAAC,cAAA,UAAQ8C,KAAK,UAAb,SAGJhD,EAAAC,EAAAC,cAACiD,EAAD,CAAWrD,MAAOsB,KAAKI,MAAM1B,MAAOU,WAAYY,KAAKZ,qBAzDzC4C,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP5D,EAAAC,EAAAC,cAACF,EAAAC,EAAM4D,WAAP,KACE7D,EAAAC,EAAAC,cAAC4D,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,KAAK,SAAAC,GACJA,EAAaC,eAEdC,MAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC","file":"static/js/main.515abe14.chunk.js","sourcesContent":["import React from 'react'\nimport './ListItems.css'\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport FlipMove from 'react-flip-move';\n\nfunction ListItems(props) {\n\tconst items = props.items;\n\tconst listItems = items.map(items => {\n\t\treturn <div className=\"list\" key={items.key}>\n\t\t\t\t\t<p>{items.text}\n\t\t\t\t\t<span>\n\t\t\t\t\t\t<FontAwesomeIcon onClick={ () => props.deleteItem(items.key)} className=\"faicons\" icon=\"trash\"></FontAwesomeIcon>\n\t\t\t\t\t</span>\n\t\t\t\t\t</p>\n\t\t\t\t</div>\t\n\t\t\t})\n\treturn(\n\t\t<div>\n\t\t<FlipMove duration={500} easing=\"ease-in-out\">\n\t\t{listItems}\n\t\t</FlipMove>\n\t\t</div>\n\t)\n}\n\nexport default ListItems\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport ListItems from './ListItems.js';\nimport {library} from '@fortawesome/fontawesome-svg-core'\nimport {faTrash} from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faTrash);\n\nclass App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      currentItem:{\n      text: '',\n      key: ''\n      }\n    }\n    this.handleInput = this.handleInput.bind(this);\n    this.addItem = this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n  }\n  // Methods\n  handleInput(e) {\n    this.setState({\n      currentItem:{\n        text: e.target.value,\n        key:Date.now()\n      }\n    })\n  }\n\n  deleteItem(key) {\n    const filteredItems = this.state.items.filter(item => item.key !== key);\n    this.setState({\n      items: filteredItems\n    })\n  }\n\n  addItem(e){\n    e.preventDefault();\n    const newItem = this.state.currentItem;\n    console.log(newItem);\n    if(newItem.text !== \"\") {\n      const newItems = [...this.state.items, newItem];\n      this.setState({\n        items: newItems,\n        currentItem: {\n          text: '',\n          key: ''\n        }\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n      <header>\n        <form id=\"todo-form\" onSubmit={this.addItem}>\n          <input type=\"text\" placeholder=\"Enter todo\" value={this.state.currentItem.text} onChange={this.handleInput}></input>\n\n          <button type=\"submit\">Add</button>\n        </form>\n      </header>\n      <ListItems items={this.state.items} deleteItem={this.deleteItem}>\n      </ListItems>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}